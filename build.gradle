//our build script needs to use external libraries, so we add them to
//the script's classpath here using the buildscript() method
buildscript {
    repositories {
        maven { url "http://repo.spring.io/libs-snapshot" }
        mavenLocal()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.0.2.RELEASE")
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'jetty'

task wrapper(type: Wrapper) {
    gradleVersion = '1.11'
}

jar {
    baseName = 'gs-rest-service'
    version =  '0.1.0'
}

version = '1.0'

repositories {
    mavenCentral()
    maven { url "http://repo.spring.io/libs-snapshot" }
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("com.fasterxml.jackson.core:jackson-databind")
    compile('javax.inject:javax.inject:1')

    testCompile(
            ['junit:junit:4.11'],
            ['org.easytesting:fest-assert-core:2.0M10'],
            ['org.seleniumhq.selenium:selenium-java:2.41.0'],
            ['org.mockito:mockito-all:1.9.5']
    )
}


test {
    exclude '**/*IT*'
}

task itest(type: Test) {
    include '**/*IT*'
    doFirst {
        jettyRun.httpPort = 9090    // Port for test
        jettyRun.daemon = true
        jettyRun.execute()
    }
    doLast {
        jettyStop.stopPort = 9091   // Port for stop signal
        jettyStop.stopKey = 'stopKey'
        jettyStop.execute()
    }
}
