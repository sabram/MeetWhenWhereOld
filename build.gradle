//our build script needs to use external libraries, so we add them to
//the script's classpath here using the buildscript() method
buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "http://repo.spring.io/libs-release" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.1.4.RELEASE")
        classpath 'com.moowork.gradle:gradle-grunt-plugin:0.5'
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'jetty'
apply plugin: 'grunt'
apply plugin: 'war'

task wrapper(type: Wrapper) {
    gradleVersion = '1.11'
}

war {
    baseName = 'meetwhenwhere'
    version =  '0.1.0'
}

version = '1.0'

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "http://repo.spring.io/libs-release" }
}

dependencies {
    providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")
    compile("com.fasterxml.jackson.core:jackson-databind")
    compile('javax.inject:javax.inject:1')
    compile('com.google.guava:guava:17.0')
    compile 'org.springframework.data:spring-data-jpa:1.3.4.RELEASE'
    compile 'org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final'
    compile 'org.hibernate:hibernate-entitymanager:4.0.1.Final'
    runtime 'com.h2database:h2:1.3.173'

    testCompile(
            ['junit:junit:4.11'],
            ['org.easytesting:fest-assert-core:2.0M10'],
            ['org.seleniumhq.selenium:selenium-java:2.41.0'],
            ['org.mockito:mockito-all:1.9.5'],
            ['org.springframework:spring-test'],
            ['com.jayway.jsonpath:json-path-assert:0.8.1']
    )
}

configurations {
    providedRuntime
}



test {
    exclude '**/*IT*'
}

task itest(type: Test) {
    include '**/*IT*'
}

task startServer {
    doFirst {
        jettyRun.httpPort = 9090    // Port for test
        jettyRun.daemon = true
        jettyRun.execute()
    }
}

grunt_protractor.dependsOn startServer


task stopServer {
    jettyStop.stopPort = 9091   // Port for stop signal
    jettyStop.stopKey = 'stopKey'
    jettyStop.execute()
}

stopServer.dependsOn grunt_protractor

task guitest(type: Test, dependsOn: stopServer) {
    //NB Need to manually run: webdriver-manager start
    //Haven't figured out how to automate yet.
    //Although this may be useful: https://github.com/srs/gradle-grunt-plugin/issues/12
}

